package com.telino.avp.servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.telino.avp.dao.LogArchiveDao;
import com.telino.avp.dao.LogEventDao;
import com.telino.avp.entity.auxil.LogArchive;
import com.telino.avp.entity.auxil.LogEvent;
import com.telino.avp.exception.AvpExploitException;
import com.telino.avp.service.SwitchDataSourceService;
import com.telino.avp.tools.ServerProc;

@Controller
@RequestMapping("/ExploitationService")
public class ExploitationServiceController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ExploitationServiceController.class);

	@Autowired
	private LogArchiveDao logArchiveDao;

	@Autowired
	private LogEventDao logEventDao;

	@Autowired
	private SwitchDataSourceService switchDataSourceService;

	@RequestMapping(params = { "nomBase", "command" }, method = { RequestMethod.GET, RequestMethod.POST })
	public void doGetAndPost(@RequestParam("nomBase") String mybase, @RequestParam("command") String commande,
			HttpServletRequest request, HttpServletResponse response) throws IOException, AvpExploitException {

		LOGGER.info(" Servlet exploitation V1.0 - nfz42013");

		response.setContentType("text/html");

		PrintWriter out = response.getWriter();
		out.println("<html>");
		out.println("<head>");
		out.println("<title>Exploitation</title>");
		out.println("</head>");
		if (!commande.isEmpty()) {
			switch (commande) {

			case "isinitialized":
				isinitialized(out);
				break;
			case "log_archive":
			case "log_event":
				if (null == mybase || mybase.isEmpty()) {
					out.println("<body>");
					out.println("nomBase non renseignée");
					out.println("</body>");
				} else {

					// Switch DataSource 
					switchDataSourceService.switchDataSourceFor(mybase);

					lastScellement(commande, out);
				}
				break;
			default:
				out.println("<body>");
				out.println("Commande demandée inconnue");
				out.println("</body>");

			}
			out.println("</html>");
		}
	}

	/**
	 * Ecrit la date de dernier scellement du journal
	 * 
	 * @param commande
	 *            nom de la table du journal à contrôler
	 * @param out
	 */
	private void lastScellement(String commande, PrintWriter out) {

		String horodatage = "No sealing log archive exists";
		if (commande.equals("log_archive")) {
			Optional<LogArchive> logArchiveOpt = logArchiveDao.getLastSealedLog();
			if (logArchiveOpt.isPresent())
				horodatage = logArchiveOpt.get().getHorodatage().toString();
		} else {
			Optional<LogEvent> logEventOpt = logEventDao.getLastSealedLog();
			if (logEventOpt.isPresent())
				horodatage = logEventOpt.get().getHorodatage().toString();
		}

		out.println("<body>");
		out.println(horodatage);
		out.println("</body>");
	}

	/**
	 * Ecrit le statut du serveur
	 * 
	 * @param out
	 */
	private void isinitialized(PrintWriter out) {
		if (ServerProc.password1 != null && ServerProc.password2 != null) {
			out.println("<body>");
			out.println("OK");
			out.println("</body>");
		} else {
			out.println("<body>");
			out.println("KO");
			out.println("</body>");
		}

	}
}
